## '지금 시작하기' 버튼 구현 과정 분석

이 문서는 '지금 시작하기' 버튼이 사용자 인터페이스에 표시되고, 사용자가 클릭했을 때 특정 동작이 실행되기까지의 과정을 코드와 함께 설명합니다.

### 1. `Home.tsx` : 이벤트 핸들러 정의

모든 상호작용은 `Home` 컴포넌트에서 시작됩니다. 여기서 '지금 시작하기' 버튼 클릭 시 실행될 `handleStart` 함수를 정의합니다.

```typescript
// src/pages/Home/Home.tsx

// ... (생략)

const Home: React.FC = () => {
  // ... (생략)

  /**
   * 히어로 섹션의 '지금 시작하기' 버튼 클릭 시 호출되는 핸들러 함수입니다.
   */
  const handleStart = () => {
    console.log('지금 시작하기 클릭');
  };

  // ... (생략)

  return (
    <div className={styles.homeContainer}>
      {/* ... (생략) */}
      <main className={styles.mainContent}>
        {/* ... (생략) */}
        {/* 
          HeroSection 컴포넌트에 handleStart 함수를 onStartClick 이라는 prop으로 전달합니다.
        */}
        <HeroSection onStartClick={handleStart} onIntroClick={handleIntro} onContactClick={handleContact} />
      </main>
    </div>
  );
};

export default Home;
```

`Home` 컴포넌트는 `handleStart`라는 간단한 콘솔 로그 함수를 `HeroSection` 컴포넌트에 `onStartClick`이라는 이름의 prop으로 전달합니다.

---

### 2. `HeroSection.tsx` : 이벤트 핸들러 연결

`HeroSection` 컴포넌트는 `Home` 컴포넌트로부터 받은 `onStartClick` prop을 실제 `Button` 컴포넌트에 연결하는 역할을 합니다.

```typescript
// src/components/HeroSection.tsx

// ... (생략)
import Button from './Button';
import type { HeroSectionProps } from '../types';

export const HeroSection: React.FC<HeroSectionProps> = ({ onStartClick, onIntroClick, onContactClick }) => {
  return (
    <section className={styles.heroSection}>
      {/* ... (생략) */}

      {/* "지금 시작하기" 버튼 */}
      <div className={styles.startButtonWrapper}>
        {/*
          Button 컴포넌트의 onClick prop에 Home 컴포넌트로부터 받은 onStartClick 함수를 연결합니다.
          이 Button은 'primary' 스타일과 'lg' 사이즈로 렌더링됩니다.
        */}
        <Button variant="primary" size="lg" onClick={onStartClick} className="flex items-center space-x-2">
          <span className="material-icons-outlined">mic</span>
          <span>지금 시작하기</span>
        </Button>
      </div>
      
      {/* ... (생략) */}
    </section>
  );
};
```

`HeroSection`은 UI 구조를 담당하며, `onStartClick`이라는 이름으로 받은 함수를 `Button` 컴포넌트의 `onClick` prop에 그대로 전달합니다.

---

### 3. `Button.tsx` : 실제 버튼 구현 및 이벤트 할당

`Button` 컴포넌트는 재사용 가능한 버튼을 만드는 UI 컴포넌트입니다. `HeroSection`으로부터 `onClick` prop을 받아 실제 HTML `<button>` 요소의 `onClick` 이벤트에 할당합니다.

```typescript
// src/components/Button.tsx

// ... (생략)
import type { ButtonProps } from '../types';

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  onClick,
  children,
  className = '',
}) => {
  // ... (스타일 클래스 계산 로직 생략)

  // 최종적으로 계산된 CSS 클래스들을 버튼에 적용합니다.
  const combined = classNames(styles.buttonBase, sizeClass, variantClass, className);

  return (
    {/*
      HeroSection에서 전달된 onClick 함수 (결국 Home.tsx의 handleStart)가
      이 <button> 요소의 onClick 이벤트 리스너로 등록됩니다.
    */}
    <button onClick={onClick} className={combined}>
      {children}
    </button>
  );
};

export default Button;
```

사용자가 '지금 시작하기' 버튼을 클릭하면, `Button` 컴포넌트의 `<button>` 요소에 등록된 `onClick` 이벤트가 발생합니다. 이 이벤트는 `HeroSection`을 거쳐 `Home` 컴포넌트에 정의된 `handleStart` 함수를 최종적으로 실행시키고, 개발자 콘솔에 "지금 시작하기 클릭"이라는 메시지를 출력하게 됩니다.

### 4. `Button.module.css` : 버튼 스타일링

`Button.tsx`에서 사용되는 스타일은 `Button.module.css` 파일에 정의되어 있습니다. `variant`와 `size` prop에 따라 다른 스타일이 적용됩니다.

```css
/* src/components/Button.module.css */

.buttonBase {
  @apply rounded-lg transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50;
}

.sizeLg {
  @apply py-4 px-12 text-lg;
}

.variantPrimary {
  @apply bg-white text-gray-800 font-bold hover:bg-opacity-90;
}
```

'지금 시작하기' 버튼은 `variant="primary"`와 `size="lg"` prop을 사용하므로, `.variantPrimary`와 `.sizeLg` 클래스에 정의된 Tailwind CSS 유틸리티들이 적용되어 흰색 배경의 큰 버튼으로 스타일링됩니다.

---

### 요약

`Home (handleStart 정의)` -> `HeroSection (onStartClick으로 전달)` -> `Button (onClick으로 전달)` -> `<button onClick={...}> (이벤트 최종 할당)`

이러한 컴포넌트 기반의 prop 드릴링 구조는 각 컴포넌트의 역할을 명확히 분리하고 코드의 재사용성을 높이는 React의 핵심 디자인 패턴입니다. 
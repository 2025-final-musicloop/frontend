# 프로젝트 재구성 및 오류 해결 작업 요약 (2025-06-06)

## 1. 초기 설정 및 프로젝트 구조화

### 작업 내용
- 사용자 가이드에 따라 React + TypeScript 프로젝트의 구조를 전면적으로 개편했습니다.
- **패키지 설치:** `tailwindcss`, `postcss`, `autoprefixer`, `classnames`를 설치했습니다.
- **폴더 및 파일 생성:**
  - `src/styles`: `globals.css`, `tailwind.config.js` 생성 및 내용 작성.
  - `src/constants`: `menus.ts`, `colors.ts` 생성.
  - `src/types`: `index.d.ts` 생성 및 모든 컴포넌트 타입 정의.
  - `src/components`: `Button`, `Sidebar`, `SidebarItem`, `Header`, `BlobBackground`, `HeroSection` 컴포넌트 및 연관 CSS Module 파일 생성.
  - `src/pages`: 기존 `Home.tsx`를 새 UI 구조로 교체하고 `Home.module.css` 업데이트.
- **최상위 파일 수정:** `App.tsx`에 라우팅을 설정하고, `main.tsx`에 전역 스타일을 임포트했습니다.

---

## 2. 프로젝트 상세 명세

### 2-1. 사용된 기술 스택 (Technology Stack)
- **프레임워크:** React (v18)
- **언어:** TypeScript
- **빌드 도구:** Vite
- **스타일링:** Tailwind CSS (v3) + CSS Modules
- **CSS 전처리기:** PostCSS, Autoprefixer

### 2-2. 주요 라이브러리 (Key Libraries)
- `react-router-dom`: 클라이언트 사이드 라우팅을 구현하여 페이지 간 이동을 관리합니다.
- `classnames`: 여러 개의 CSS 클래스 이름을 조건부로 결합할 때 사용되는 유틸리티입니다. 컴포넌트의 상태(e.g., `isActive`)에 따라 다른 스타일을 쉽게 적용할 수 있습니다.
- `tailwindcss`: 유틸리티-우선(Utility-First) CSS 프레임워크로, HTML 내에서 직접 스타일을 빠르게 구축합니다.
- `@tailwindcss/forms`: Tailwind CSS에서 폼 요소(input, select 등)의 기본 스타일을 보기 좋게 리셋하고 커스터마이징할 수 있도록 도와주는 공식 플러그인입니다.
- `@tailwindcss/container-queries`: 컨테이너 쿼리(Container Queries)를 Tailwind CSS에서 유틸리티 클래스로 사용할 수 있게 해주는 공식 플러그인입니다.

### 2-3. 디렉터리 구조 (Directory Structure)
```
src/
├── assets/             # 이미지, 아이콘 등 정적 리소스
├── components/         # 재사용 가능한 공통 UI 컴포넌트
├── constants/          # 메뉴, 색상 등 애플리케이션 전반에서 사용되는 상수
├── pages/              # 각 페이지를 구성하는 메인 컴포넌트
├── styles/             # 전역 CSS 파일 및 Tailwind 설정
├── types/              # 프로젝트 전반에서 사용되는 TypeScript 타입 정의
├── App.tsx             # 최상위 애플리케이션 컴포넌트 및 라우팅 설정
└── main.tsx            # 애플리케이션 진입점 (DOM 렌더링)
```

### 2-4. 컴포넌트 설계 (Component Design)
각 컴포넌트는 `tsx` 파일과 스타일을 정의하는 `.module.css` 파일을 한 쌍으로 구성하여 관심사를 분리했습니다.

- **`Button`**: `variant`, `size` 등의 `props`를 받아 다양한 형태의 버튼을 렌더링하는 공통 컴포넌트.
- **`SidebarItem`**: 사이드바의 개별 메뉴 항목. `iconName`, `label`, `isActive` `props`를 받아 상태에 따라 다른 스타일을 표시.
- **`Sidebar`**: `constants/menus.ts`의 메뉴 목록을 기반으로 여러 `SidebarItem`을 렌더링하여 전체 사이드바를 구성.
- **`Header`**: 페이지 상단에 위치하며, 로그인 버튼 등을 포함하는 헤더 영역.
- **`BlobBackground`**: `tailwind.config.cjs`에 정의된 `keyframes`를 사용하여 움직이는 배경 블럽(blob) 애니메이션을 구현한 컴포넌트.
- **`HeroSection`**: 메인 페이지의 핵심 소개 영역. `BlobBackground`, `Button` 등을 조합하여 타이틀, 설명, 행동 유도 버튼을 표시.

### 2-5. 전역 설정 (Global Configuration)
- **`tailwind.config.cjs`**:
  - `content`: Tailwind가 클래스를 스캔할 파일 경로를 지정합니다.
  - `theme.extend`: 프로젝트의 디자인 시스템을 정의합니다. `colors` (커스텀 색상), `fontFamily` (커스텀 폰트), `animation` 및 `keyframes` (커스텀 애니메이션) 등을 확장했습니다.
  - `plugins`: `@tailwindcss/forms`, `@tailwindcss/container-queries`와 같은 추가 기능을 활성화합니다.
- **`postcss.config.cjs`**:
  - `tailwindcss`와 `autoprefixer`를 PostCSS 플러그인으로 등록합니다. 이를 통해 빌드 과정에서 Tailwind CSS 클래스가 실제 CSS로 변환되고, 브라우저 호환성을 위한 `vendor prefix`가 자동으로 추가됩니다.
- **`src/styles/globals.css`**:
  - `@import`: Google Fonts(Inter, Noto Sans KR, Material Icons)를 가져옵니다.
  - `@tailwind`: Tailwind CSS의 `base`, `components`, `utilities` 레이어를 주입하여 기본 스타일을 적용합니다.
  - `body`: `@apply`를 사용하여 `tailwind.config.cjs`에 정의된 `bg-background`, `font-sans` 등의 커스텀 유틸리티를 전역 `body` 스타일에 적용합니다.

### 2-6. 생성 파일 상세 설명
- **`tailwind.config.cjs`**: Tailwind CSS의 핵심 설정 파일. 커스텀 색상(`primary`, `secondary`), 폰트(`sans`), 애니메이션(`blob`) 등을 정의하여 프로젝트 전반의 디자인 시스템을 구축합니다. `content` 속성을 통해 Tailwind가 적용될 파일을 지정하고, `plugins`를 통해 부가 기능을 확장합니다.
- **`postcss.config.cjs`**: PostCSS의 설정 파일. `tailwindcss`와 `autoprefixer` 플러그인을 등록하여, 빌드 시점에 Tailwind 클래스를 실제 CSS로 변환하고, 자동으로 브라우저별 접두사(vendor prefix)를 붙여 크로스 브라우징을 지원합니다.
- **`src/styles/globals.css`**: 프로젝트의 전역 스타일시트. 구글 폰트와 아이콘을 `@import`하고, `@tailwind` 지시문을 통해 Tailwind의 기본 스타일, 컴포넌트, 유틸리티 클래스를 주입합니다. 또한, `body` 태그에 전역 배경색, 폰트 등을 `@apply`로 적용합니다.
- **`src/constants/menus.ts`**: 사이드바 메뉴 데이터를 상수로 관리하는 파일. 각 메뉴의 `id`, 아이콘(`material-icons-outlined` 이름), 라벨 텍스트를 객체 배열 형태로 정의하여 유지보수성을 높입니다.
- **`src/constants/colors.ts`**: `tailwind.config.cjs`에 정의된 색상 이름을 문자열 상수로 관리하는 파일. 코드 내에서 `COLORS.primary.DEFAULT`와 같이 타입을 추론할 수 있는 형태로 색상을 사용하여 오타를 방지하고 일관성을 유지합니다.
- **`src/types/index.d.ts`**: 프로젝트 전반에서 사용되는 TypeScript 타입을 모아놓은 파일. `ButtonProps`, `SidebarProps` 등 각 컴포넌트의 `props` 타입을 비롯하여 메뉴 아이템, 버튼 종류 등 공통 타입을 선언하여 코드의 안정성과 재사용성을 높입니다.
- **`src/components/Button.tsx`**: 재사용 가능한 공통 버튼 컴포넌트. `variant`(`primary`, `secondary`, `outline`), `size`(`sm`, `md`, `lg`) 등 다양한 `props`를 받아, `classnames` 유틸리티를 통해 조건에 맞는 스타일 클래스를 동적으로 조합하여 버튼을 생성합니다.
- **`src/components/SidebarItem.tsx`**: 사이드바의 각 메뉴 항목을 나타내는 컴포넌트. 아이콘, 라벨, 활성화 상태(`isActive`)를 `props`로 받아 `active` 또는 `inactive` 클래스를 적용하여 시각적으로 구분된 메뉴 아이템을 렌더링합니다.
- **`src/components/Sidebar.tsx`**: `menus.ts`에서 정의된 메뉴 배열을 받아 `map` 함수로 순회하며, 각 메뉴에 해당하는 `SidebarItem` 컴포넌트를 생성합니다. 전체 사이드바의 레이아웃과 메뉴 목록을 관리합니다.
- **`src/components/Header.tsx`**: 페이지 상단 헤더 영역을 담당하는 컴포넌트. 내부에 `Button` 컴포넌트를 사용하여 `Login` 버튼을 포함하고 있습니다.
- **`src/components/BlobBackground.tsx`**: 배경 애니메이션을 담당하는 컴포넌트. 내부에 `Blob` 컴포넌트를 정의하고, `top`, `left`, `bgColor`, `delay` 등 `props`를 다르게 설정한 여러 `Blob`을 배치하여 몽환적인 움직임을 만들어냅니다. 애니메이션 자체는 `tailwind.config.cjs`에 정의되어 있습니다.
- **`src/components/HeroSection.tsx`**: 메인 페이지의 가장 중심이 되는 소개(Hero) 영역. `BlobBackground`를 배경으로 사용하고, 그라데이션이 적용된 타이틀, 부제목, 설명, 그리고 여러 `Button` 컴포넌트(시작하기, 서비스 소개 등)를 조합하여 사용자에게 서비스의 핵심 가치를 전달합니다.
- **`src/pages/Home.tsx`**: 홈 페이지(`/`)의 전체 구조를 담당하는 페이지 컴포넌트. `Sidebar`, `Header`, `HeroSection` 등 여러 공통 컴포넌트를 조합하여 하나의 완전한 페이지를 구성합니다. 각 컴포넌트의 이벤트 핸들러(e.g., `handleMenuClick`)를 정의하고 `props`로 전달하는 역할을 합니다.
- **`src/App.tsx`**: 애플리케이션의 최상위 라우팅을 설정하는 파일. `react-router-dom`을 사용하여 경로(`path`)에 따라 렌더링할 페이지 컴포넌트(`element`)를 지정합니다. 현재는 `/` 경로에 `Home` 페이지만을 연결하고 있습니다.
- **`src/main.tsx`**: React 애플리케이션의 진입점(Entry Point). `ReactDOM.createRoot`를 사용하여 React의 루트를 생성하고, 최상위 컴포넌트인 `App`을 렌더링합니다. `styles/globals.css`를 여기서 `import`하여 전역 스타일이 애플리케이션 전체에 적용되도록 합니다.

---

## 3. 발생한 오류 및 해결 과정

프로젝트 설정 과정에서 주로 **`tailwindcss`의 버전 호환성** 문제로 인해 여러 오류가 연쇄적으로 발생했으며, 이를 해결하는 과정은 다음과 같습니다.

### 오류 1: Tailwind 설정 파일 생성 실패
- **현상:** `npx tailwindcss init -p` 명령어 실행 시, `tailwindcss` 실행 파일을 찾지 못하는 오류 발생.
- **원인:** `npm` 설치 과정에서 실행 파일이 정상적으로 생성되지 않음.
- **해결:** `npx` 명령어에 의존하지 않고, `postcss.config.js`와 `tailwind.config.js` 파일을 수동으로 생성하여 문제를 우회했습니다.

### 오류 2: PostCSS 설정 파일 로딩 실패 (ES 모듈 충돌)
- **현상:** `module is not defined in ES module scope` 오류 발생.
- **원인:** 프로젝트의 `package.json`에 `"type": "module"`이 설정되어 있어 `.js` 확장자 파일이 ES 모듈로 취급되었으나, 설정 파일 내용은 CommonJS(`module.exports`) 문법으로 작성되어 충돌이 발생했습니다.
- **해결:** `postcss.config.js`와 `tailwind.config.js`의 확장자를 `.cjs`로 변경하여 CommonJS 파일임을 명시적으로 지정했습니다.

### 오류 3: Tailwind CSS v4 알파 버전으로 인한 연쇄적인 호환성 문제
- **근본 원인:** `npm install tailwindcss@latest` 명령어 실행 시, 안정 버전인 v3가 아닌 개발 중인 **v4 알파 버전**이 설치된 것이 모든 문제의 시작이었습니다. 사용자 가이드는 v3 기준이었기 때문에 설정 충돌이 발생했습니다.

- **1) PostCSS 플러그인 오류**
  - **현상:** `install @tailwindcss/postcss` 오류 발생.
  - **분석:** v4는 PostCSS 플러그인으로 `tailwindcss` 대신 `@tailwindcss/postcss`를 사용해야 했습니다.
  - **시도:** `@tailwindcss/postcss`를 설치하고 `postcss.config.cjs`를 수정했습니다.

- **2) `@apply` 지시문 오류**
  - **현상:** `Cannot apply unknown utility class 'bg-background'` 오류 발생.
  - **분석:** v4 알파 버전에서 전역 CSS의 `@apply` 동작 방식이 변경되었습니다.
  - **시도:** `@apply` 대신 `theme()` 함수를 사용하도록 `globals.css`를 수정했으나, `theme()` 함수의 경로 해석 문제로 연달아 실패했습니다. (`theme('colors.background.DEFAULT')` -> `theme('colors.background')` -> `theme('backgroundColor.background')` 모두 실패)

- **3) CSS 변수 방식 시도**
  - **분석:** `theme()` 함수 자체의 불안정성을 우회하기 위해 CSS 표준 변수(`var()`)를 사용하는 방식으로 전환했습니다.
  - **시도:** `globals.css`에 `:root` 변수를 선언하고, `tailwind.config.cjs`가 이를 참조하도록 수정했습니다.

- **4) 플러그인 호환성 오류**
  - **현상:** `Missing field 'negated' on ScannerOptions.sources` 오류가 지속적으로 발생.
  - **분석:** 문제의 원인이 v3용으로 만들어진 `@tailwindcss/forms`와 `@tailwindcss/container-queries` 플러그인과 v4 알파 버전 간의 깊은 비호환성 문제임을 확인했습니다.
  - **시도:** 플러그인을 제거하고 `@next` 버전으로 재설치하거나, 설정 파일에서 주석 처리하는 등 여러 시도를 했으나 모두 실패했습니다.

### 최종 해결: Tailwind CSS v3 안정 버전으로 다운그레이드
- **결론:** v4 알파 버전의 불안정성으로 인해 정상적인 작업이 불가능하다고 판단, 안정적인 v3 환경으로 완전히 복원하기로 결정했습니다.
- **작업 1:** `npm uninstall`로 모든 `tailwindcss` 관련 패키지를 제거했습니다.
- **작업 2:** `npm install -D tailwindcss@3.4.4`와 같이, **정확한 v3 안정 버전**을 명시하여 모든 관련 패키지를 재설치했습니다.
- **작업 3:** `postcss.config.cjs`, `tailwind.config.cjs`, `globals.css` 파일을 모두 원래의 v3 방식 설정으로 되돌렸습니다.

---

## 4. 최종 결과
- `tailwindcss` 버전을 안정적인 v3로 명시적으로 고정한 후, 모든 설정 오류가 해결되었습니다.
- 현재 프로젝트는 제공된 가이드라인에 따라 모든 파일과 컴포넌트가 구성된, 정상적으로 실행 가능한 상태입니다. 